name: Plot Tickers From File

on:
  workflow_dispatch:
    inputs:
      tickers_file:
        description: "Choose ticker file from repository"
        required: true
        type: choice
        options: [us_tickers.txt, ca_tickers.txt]
        default: us_tickers.txt
      outdir:
        description: "Output directory for PNG files"
        required: true
        type: string
        default: graphs
      force_overwrite:
        description: "Force overwrite (re-plot even if PNG is up-to-date)?"
        required: true
        type: choice
        options: [no, yes]
        default: no

      # Series toggles
      s_price:      { description: "Show: Price on Ex-Date",                           required: true, type: choice, options: [no, yes], default: yes }
      s_dividends:  { description: "Show: Dividends",                                   required: true, type: choice, options: [no, yes], default: yes }
      s_growth:     { description: "Show: Growth of $10,000",                           required: true, type: choice, options: [no, yes], default: yes }
      s_growth_wht: { description: "Show: Growth of $10,000 (Less 15% US WHT) [USD]",   required: true, type: choice, options: [no, yes], default: yes }
      s_ann:        { description: "Show: Total Annualized Return (>=12 months)",       required: true, type: choice, options: [no, yes], default: yes }
      s_ann_wht:    { description: "Show: Ann. Return (Less 15% US WHT) [USD]",         required: true, type: choice, options: [no, yes], default: yes }
      s_yield:      { description: "Show: Annualized Yield (%) from CSV",               required: true, type: choice, options: [no, yes], default: yes }

permissions:
  contents: write

jobs:
  plot-from-file:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies (plotting + bootstrap scraping)
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            pip install pandas numpy matplotlib yfinance requests beautifulsoup4 lxml
          fi

      - name: Decide currency based on file
        id: decide
        run: |
          FILE="${{ github.event.inputs.tickers_file }}"
          case "$FILE" in
            us_tickers.txt) CURRENCY=USD ;;
            ca_tickers.txt) CURRENCY=CAD ;;
            *) CURRENCY=USD ;;
          esac
          echo "currency=$CURRENCY" >> "$GITHUB_OUTPUT"

      - name: Build series flags
        id: flags
        env:
          CUR:        ${{ steps.decide.outputs.currency }}
          S_PRICE:    ${{ github.event.inputs.s_price }}
          S_DIV:      ${{ github.event.inputs.s_dividends }}
          S_GROW:     ${{ github.event.inputs.s_growth }}
          S_GROWWHT:  ${{ github.event.inputs.s_growth_wht }}
          S_ANN:      ${{ github.event.inputs.s_ann }}
          S_ANNWHT:   ${{ github.event.inputs.s_ann_wht }}
          S_YIELD:    ${{ github.event.inputs.s_yield }}
        run: |
          FLAGS=""
          [ "$S_PRICE"   = "yes" ] && FLAGS="$FLAGS --price"
          [ "$S_DIV"     = "yes" ] && FLAGS="$FLAGS --dividends"
          [ "$S_GROW"    = "yes" ] && FLAGS="$FLAGS --growth"
          # US-withholding lines only for USD
          if [ "$CUR" = "USD" ] && [ "$S_GROWWHT" = "yes" ]; then FLAGS="$FLAGS --growth-wht"; fi
          [ "$S_ANN"     = "yes" ] && FLAGS="$FLAGS --ann"
          if [ "$CUR" = "USD" ] && [ "$S_ANNWHT" = "yes" ]; then FLAGS="$FLAGS --ann-wht"; fi
          [ "$S_YIELD"   = "yes" ] && FLAGS="$FLAGS --yield"
          echo "flags=$FLAGS" >> "$GITHUB_OUTPUT"

      - name: Generate graphs for all tickers
        shell: bash
        env:
          TICKERS_FILE:   ${{ github.event.inputs.tickers_file }}
          CURRENCY:       ${{ steps.decide.outputs.currency }}
          OUTDIR:         ${{ github.event.inputs.outdir }}
          FORCE_OVER:     ${{ github.event.inputs.force_overwrite }}
          FLAGS:          ${{ steps.flags.outputs.flags }}
        run: |
          set -euo pipefail
          [ -f "$TICKERS_FILE" ] || { echo "Missing $TICKERS_FILE"; exit 1; }
          mkdir -p "$OUTDIR"

          total=0; ok=0; failed=0
          while IFS= read -r line || [ -n "$line" ]; do
            t="$(echo "$line" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')"
            [ -z "$t" ] && continue
            [[ "$t" =~ ^# ]] && continue
            total=$((total+1))
            echo "Plotting $t ($CURRENCY)"

            # Pass --force when Force Overwrite is yes
            [ "$FORCE_OVER" = "yes" ] && FORCE="--force" || FORCE=""

            set +e
            python plot_ticker_graph.py "$t" --currency "$CURRENCY" --outdir "$OUTDIR" $FORCE $FLAGS
            rc=$?
            set -e
            if [ $rc -eq 0 ]; then
              echo "  [ok] $t"; ok=$((ok+1))
            else
              echo "  [warn] Failed for $t (exit $rc)"; failed=$((failed+1))
            fi
          done < "$TICKERS_FILE"

          echo "Summary: total=$total ok=$ok failed=$failed"

      - name: List outputs
        run: |
          ls -la "${{ github.event.inputs.outdir }}" || true

      - name: Commit and push artifacts (PNGs + any updated ticker lists)
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add -f "${{ github.event.inputs.outdir }}"/*.png || true
          git add -f us_tickers.txt ca_tickers.txt || true
          git commit -m "Batch graphs from ${{ github.event.inputs.tickers_file }} (${{ steps.decide.outputs.currency }}) [force_overwrite=${{ github.event.inputs.force_overwrite }}]" || echo "Nothing to commit"
          git push || true
